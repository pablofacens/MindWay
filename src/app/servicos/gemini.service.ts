import { inject, Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, from, catchError, of } from 'rxjs';
import { map } from 'rxjs/operators';



const GEMINI_API_KEY = 'xxxxxxxxxxx'; 





const GEMINI_URL = 'https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash:generateContent';

interface GeminiResponse {
  candidates: Array<{
    content: {
      parts: Array<{
        text: string;
      }>;
    };
  }>;
}

@Injectable({
  providedIn: 'root'
})
export class GeminiService {
  private readonly http = inject(HttpClient);

  
  perguntar(pergunta: string, contexto?: string): Observable<string> {
    const prompt = contexto 
      ? `${contexto}\n\nPergunta do usu√°rio: ${pergunta}\n\nResponda de forma breve, objetiva e amig√°vel.`
      : pergunta;

    const body = {
      contents: [{
        parts: [{ text: prompt }]
      }],
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 500,
      }
    };

    const urlCompleta = `${GEMINI_URL}?key=${GEMINI_API_KEY}`;
    
    console.log('ü§ñ Gemini: Enviando pergunta...', { 
      pergunta, 
      temContexto: !!contexto,
      url: GEMINI_URL,
      keyPrefix: GEMINI_API_KEY.substring(0, 10) + '...'
    });

    return this.http.post<GeminiResponse>(urlCompleta, body).pipe(
      map(resposta => {
        const texto = resposta.candidates?.[0]?.content?.parts?.[0]?.text;
        
        if (!texto) {
          throw new Error('Resposta vazia da IA');
        }

        console.log('‚úÖ Gemini: Resposta recebida', { texto: texto.substring(0, 100) + '...' });
        return texto;
      }),
      catchError(erro => {
        console.error('‚ùå Gemini: Erro ao consultar IA', {
          status: erro.status,
          statusText: erro.statusText,
          url: erro.url,
          message: erro.message,
          error: erro.error
        });
        
        if (erro.status === 400) {
          console.error('üí° Dica: Erro 400 geralmente indica problema no formato da requisi√ß√£o ou API key inv√°lida');
          return of('‚ö†Ô∏è Erro 400: Requisi√ß√£o inv√°lida. Tente gerar uma nova API Key em https://aistudio.google.com/app/apikey');
        }
        
        if (erro.status === 401 || erro.status === 403) {
          console.error('üí° Dica: Erro 401/403 = API Key inv√°lida, expirada ou com restri√ß√µes de dom√≠nio');
          return of('‚ö†Ô∏è API Key sem permiss√£o. Gere uma nova em https://aistudio.google.com/app/apikey (sem restri√ß√µes de dom√≠nio)');
        }
        
        if (erro.status === 404) {
          console.error('üí° Dica: Erro 404 pode ser:');
          console.error('   1. API Key incorreta/expirada');
          console.error('   2. Modelo n√£o existe para sua conta');
          console.error('   3. URL da API est√° errada');
          console.error('   Tente: https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent');
          return of('‚ö†Ô∏è Endpoint n√£o encontrado (404). Poss√≠veis causas:\n1. API Key expirada - Gere nova em https://aistudio.google.com/app/apikey\n2. Sua conta n√£o tem acesso ao modelo gemini-1.5-flash\n3. Tente trocar para modelo "gemini-pro" no c√≥digo');
        }
        
        if (erro.status === 429) {
          return of('‚ö†Ô∏è Limite de requisi√ß√µes atingido. Aguarde 60 segundos.');
        }

        return of('‚ùå Erro desconhecido. Veja o console (F12) para detalhes t√©cnicos.');
      })
    );
  }

  
  gerarContextoApp(dados: {
    rotaAtual?: any;
    poisProximos?: any[];
    estacoesBike?: any[];
    clima?: any;
  }): string {
    let contexto = `
Voc√™ √© Luna, a assistente inteligente do MindWay üå±

**Sobre o MindWay:**
MindWay √© um app de mobilidade sustent√°vel em S√£o Paulo que promove:
- üö¥ Rotas de bicicleta e caminhada
- üöå Transporte p√∫blico eficiente  
- üåç Redu√ß√£o de CO‚ÇÇ e vida mais saud√°vel
- üéÆ Sistema de gamifica√ß√£o com pontos, badges e desafios

**Tipos de rota dispon√≠veis:**
- ‚ö° R√ÅPIDO: Rota de carro (mais r√°pida, N√ÉO gera pontos)
- üí∞ ECON√îMICO: Transporte p√∫blico + caminhada (economia, gera pontos)
- üå± VERDE: Bike/caminhada (sustent√°vel, zero emiss√µes, M√ÅXIMO de pontos)

**Sistema de Pontos:**
- üö¥ Bicicleta: 10 pontos/km
- üö≤ Bike compartilhada: 8 pontos/km
- üö∂ Caminhada: 5 pontos/km
- üöå Transporte p√∫blico: 3 pontos/km
- üöó Carro: 0 pontos (n√£o sustent√°vel)

**B√¥nus de Pontos:**
- ‚è∞ Rush hour (7-10h, 17-20h): +20%
- üåÖ Madrugada (antes 6h): +30%
- üåô Noturno (ap√≥s 20h): +15%
- üéâ Fim de semana: +10%
- ‚õ∞Ô∏è Eleva√ß√£o: +1 pt a cada 10m de subida
- üåø Score sustentabilidade: b√¥nus vari√°vel

**Recursos do app:**
- Esta√ß√µes de bike compartilhada em tempo real (Bike Sampa, Tembici)
- Pontos de apoio: üíß bebedouros, üå≥ bancos/descanso, üè• farm√°cias, üöª banheiros
- C√°lculo de CO‚ÇÇ evitado (comparado com carro: 120g/km)
- An√°lise de eleva√ß√£o (ganho/perda de altitude)
- Previs√£o de clima e ilumina√ß√£o
- Sistema de conquistas (badges por dist√¢ncia, CO‚ÇÇ evitado, streaks)

**Badges e Desafios:**
- Desbloque√°veis por completar metas
- Categorias: dist√¢ncia, sustentabilidade, variedade, social
- Raridades: Comum, Rara, √âpica, Lend√°ria
- Desafios di√°rios/semanais com recompensas

**Sua personalidade:**
- Amig√°vel, animada e encorajadora
- Apaixonada por mobilidade sustent√°vel
- Gamifica√ß√£o √© importante! Mencione pontos e badges quando relevante
- Usa emojis naturalmente (mas n√£o exagere)
- Respostas conversacionais e humanizadas
- Evita jarg√µes t√©cnicos
- D√° n√∫meros concretos (dist√¢ncia, tempo, pontos, CO‚ÇÇ)

**Como responder:**
- M√°ximo 4-5 linhas (seja concisa mas calorosa)
- Sempre incentive op√ß√µes verdes quando apropriado
- Mencione quantos pontos a pessoa vai ganhar
- Destaque economia de CO‚ÇÇ quando relevante
- D√™ dicas pr√°ticas e √∫teis sobre a rota
- Use tom casual e amig√°vel ("voc√™", n√£o "o usu√°rio")
- Se n√£o souber algo, seja honesta e sugira alternativas
- Adapte o tom: urgente ‚Üí eficiente, relaxado ‚Üí incentive bike
- SEMPRE forne√ßa n√∫meros concretos quando aplic√°vel

**C√°lculos importantes:**
- CO‚ÇÇ evitado: (dist√¢ncia em km) √ó 120g (emiss√£o m√©dia carro urbano)
- Pontos bike: (km) √ó 10 + b√¥nus hor√°rio + b√¥nus eleva√ß√£o
- Pontos caminhada: (km) √ó 5 + b√¥nus hor√°rio + b√¥nus eleva√ß√£o  
- Pontos transporte p√∫blico: (km) √ó 3 + b√¥nus hor√°rio
- Tempo estimado bike: (km) √ó 3.5 min/km em m√©dia
- Tempo estimado caminhada: (km) √ó 12 min/km em m√©dia

**Exemplos de bom tom:**
‚úÖ "Que legal! Para ir ao Parque Ibirapuera de bike, s√£o 5.2km (uns 20min). Voc√™ vai ganhar 52 pontos + b√¥nus de eleva√ß√£o! üö¥ A ciclovia da Av. 23 de Maio √© super tranquila. Ainda economiza 624g de CO‚ÇÇ! üå±"

‚úÖ "Show! Essa rota de 8.5km vai te dar 85 pontos de bike üö¥ e voc√™ economiza mais de 1kg de CO‚ÇÇ! Como √© fim de semana, ganha +10% extra. A rota tem 120m de subida, ent√£o mais 12 pontos de b√¥nus!"

‚úÖ "Ih, pegar o metr√¥ nessa dist√¢ncia √© mais r√°pido! S√£o s√≥ 15min vs 40min de bike. Voc√™ vai ganhar 24 pontos e ainda economiza 288g de CO‚ÇÇ comparado com carro üöá"

‚ùå "Calculando rota cicl√≠stica. Dist√¢ncia: 5.2km. Tempo estimado: 20 minutos."
‚ùå "A rota est√° dispon√≠vel. Ser√° uma boa escolha sustent√°vel."
‚ùå "Voc√™ pode ir de bicicleta. √â bom para o meio ambiente."
‚ùå "Calculando rota cicl√≠stica. Dist√¢ncia: 5.2km. Tempo estimado: 20 minutos. Ciclovia dispon√≠vel."

**C√°lculos importantes:**
- CO‚ÇÇ evitado: (dist√¢ncia em km) √ó 120g (carro) - emiss√£o do modal
- Pontos bike: (km) √ó 10 + b√¥nus hor√°rio + b√¥nus eleva√ß√£o
- Tempo estimado bike: (km) √ó 3.5 min/km em m√©dia
`;

    if (dados.rotaAtual) {
      contexto += `\n\nRota atual calculada:
- Dist√¢ncia: ${dados.rotaAtual.distanciaTotal}km
- Tempo: ${dados.rotaAtual.duracaoTotal}min
- Modal: ${dados.rotaAtual.tipoRota}
- Pontos estimados: ${Math.round((dados.rotaAtual.distanciaTotal || 0) * 10)} pts (se for de bike)
`;
    }

    if (dados.estacoesBike && dados.estacoesBike.length > 0) {
      contexto += `\n\nEsta√ß√µes de bike pr√≥ximas: ${dados.estacoesBike.length} dispon√≠veis`;
    }

    if (dados.poisProximos && dados.poisProximos.length > 0) {
      contexto += `\n\nPOIs pr√≥ximos: ${dados.poisProximos.length} pontos de apoio na rota`;
    }

    if (dados.clima) {
      contexto += `\n\nClima atual: ${dados.clima.descricao}, ${dados.clima.temperatura}¬∞C`;
    }

    return contexto;
  }

  
  interpretarBusca(texto: string): Observable<{
    local?: string;
    tipoRota?: 'RAPIDO' | 'ECONOMICO' | 'VERDE';
    urgencia?: 'relaxado' | 'normal' | 'urgente';
  }> {
    const prompt = `
Analise a seguinte busca de rota e extraia informa√ß√µes:
"${texto}"

Retorne APENAS um JSON v√°lido (sem markdown, sem explica√ß√µes) no formato:
{
  "local": "nome do lugar extra√≠do ou null",
  "tipoRota": "RAPIDO ou ECONOMICO ou VERDE ou null",
  "urgencia": "relaxado ou normal ou urgente"
}

Exemplos:
- "preciso ir no shopping r√°pido" -> {"local": "shopping", "tipoRota": "RAPIDO", "urgencia": "urgente"}
- "vou pedalar at√© o parque" -> {"local": "parque", "tipoRota": "VERDE", "urgencia": "relaxado"}
- "como chego no metr√¥ vila madalena" -> {"local": "metr√¥ vila madalena", "tipoRota": "ECONOMICO", "urgencia": "normal"}
`;

    return this.perguntar(prompt).pipe(
      map(resposta => {
        try {
          
          const json = resposta.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
          return JSON.parse(json);
        } catch (erro) {
          console.warn('‚ö†Ô∏è Gemini: N√£o conseguiu parsear JSON da interpreta√ß√£o', resposta);
          return {};
        }
      })
    );
  }

  
  analisarSeguranca(rota: { nome?: string; tipo?: string; distancia?: number }[]): Observable<{
    nivel: 'SEGURA' | 'MODERADA' | 'PERIGOSA';
    justificativa: string;
    sugestao?: string;
  }> {
    const viasDesc = rota.map(v => 
      `${v.nome || 'Via sem nome'} (${v.tipo || 'desconhecido'}, ${v.distancia || 0}km)`
    ).join(', ');

    const prompt = `
Analise a seguran√ßa desta rota para ciclistas:
${viasDesc}

Retorne APENAS um JSON v√°lido no formato:
{
  "nivel": "SEGURA ou MODERADA ou PERIGOSA",
  "justificativa": "breve explica√ß√£o (m√°x 2 linhas)",
  "sugestao": "dica de seguran√ßa se aplic√°vel ou null"
}
`;

    return this.perguntar(prompt).pipe(
      map(resposta => {
        try {
          const json = resposta.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
          return JSON.parse(json);
        } catch (erro) {
          console.warn('‚ö†Ô∏è Gemini: N√£o conseguiu parsear an√°lise de seguran√ßa', resposta);
          return {
            nivel: 'MODERADA' as const,
            justificativa: 'N√£o foi poss√≠vel analisar a seguran√ßa desta rota.',
          };
        }
      })
    );
  }
}
